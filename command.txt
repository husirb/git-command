#新建文件夹
mkdir <filename>
#初始化ls -ah查看生产.git目录
git init
#提交到暂存区
git add <file>
#提交到仓库
git commit -m <message>
#显示最后一次提交
git last
#查看仓库状态
git status
#查看文件不同
git diff <file>
#显示提交日志，可用于版本回退
git log
#查看命令记录，可用于重返未来
git reflog
#版本穿梭
git reset --hard HEAD^/HEAD^^/HEAD~100/<headcode>
#撤销修改或恢复删除的工作区文件(实质是从版本库copy回来的，删除的文件之前未提交的修改会丢失)
#checkout 不带-- 是切换分支
git checkout --<file>
#把提交到暂存区的修改回退到工作区
git rest HEAD <file>
#删除工作区文件，提交后会删除库中文件
git rm <file>
git commit -m <message>

#远程仓库先关配置与操作
SSH-keygen -t rsa -C "mail@mail.com"
#会在主目录下生产.ssh文件包含私钥id-rsa和公钥id-rsa.pub
#copy公钥内容上GitHub粘贴公钥
#关联仓库
git remote add origin git@...
#仓库为空，首次推送本地项目到git，加-u,后续不需要该参数
git push -u origin master
#克隆项目,支持https等多协议，但原生git最快
git clone git@...

#分支管理
#分支切换秒完成，创建并切换到分支
git checkout -b <branch>
#等同于
#创建分支
git branch <branch>
#切换分支
git checkout <branch>
#查看分支，当前所在分支前面有*
git branch
#合并分支到当前分支
git merge <branch>
#删除分支
git branch -d <branch>
#查看分支图
git log --graph
#可选参数
git log --graph --pretty=oneline --abbrev-commit
#合并分支默认会使用fast forward模式，分支信息会被删除
#使用“--no-ff”参数禁用fast forward
git merge --no-ff -m <message> <branch>
#储存工作现场,之后git status查看工作区就是干净的
git stash
#查看保存的工作现场
git stash list
#恢复stash的内容并删除stash回归工作现场
git stash pop
#恢复stash的内容不删出stash
git stash apply
#删除stash
git stash drop
#强制删除未合并分支-D
git branch -D <branch>
#查看远程库信息
git remote
#查看远程库详细信息
git remote -v
#推送分支
git push origin <branch>
#抓取分支
git checkout -b dev origin/<branch>
#抓取分支最新提交
git pull
#抓取前指定本地分支与远程分支的链接
git branch --set-upstream-to=origin/<branch> <branch>
#Git用(HEAD -> master)和(origin/master)标识出当前分支的HEAD和远程origin的位置
#分叉的提交现在变成一条直线，git push origin master之后远程也是一条直线
git rebase

#标签管理
#切换到master,打新标签
git tag v1.0.0
#也可以按commit id 打标签(git log --pretty=oneline --abbrev-commit)
git tag v1.1.0 <commit id>
#创建带有说明的标签
git tag -a v1.1.1 -m <message> <commit id>
#查看所有标签,标签是按字母排序的，不是按打标签的时间
git tag
#查看标签信息
git show <tag>
#删除标签
git tag -d v1.0.0
#推送标签到远程
git push origin v1.0.0
#一次性全部推送
git push origin --tags
#已经推送到远程的标签删除
#先删除本地
git tag -d v1.0.0
#再删除远程
git push origin :refs/tags/v1.1.0

#git配置
#配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用
#每个仓库的Git配置文件都放在.git/config文件中
#当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中
#别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。
#Git适当地显示不同的颜色
git config --global color.ui true
#忽略特殊文件
#在Git工作区的根目录下创建一个特殊的.gitignore文件
#然后把要忽略的文件名填进去，Git就会自动忽略这些文件
#忽略文件的原则是：
#忽略操作系统自动生成的文件，比如缩略图等；
#忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
#忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件
#编辑完成后提交到远程仓库
#检查某条规则命令
git check-ignore -v <filename>
#忽略的文件也可以强制添加
git add -f <filename>
#配置别名,如status命令改为st
#很多人都用co表示checkout，ci表示commit，br表示branch
git config --global alias.st status
#丧心病狂配置日志显示
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"





























